#!/bin/bash

# pwm_mscan_wrapper: scan a genome with a PWM (using matrix_scan)
#  arguments:
#              matrix-file
#              p-value
#              genome-dir
#              assembly
#              parallel processing [0/1]
#
#  25.11.2015  Giovanna Ambrosini

ARGS=4         # Script takes 5 arguments, but at least 4 arguments are mandatory.
E_BADARGS=85   # Wrong number of arguments passed to script.

if [ $# -lt "$ARGS" ]
then
  echo "Usage: `basename $0` <matrix-file> <p-value> <genome-dir> <assembly[hg19|mm9|..]> <parallel [0/1]>"
  exit $E_BADARGS
fi

# Declare associative array for background base composition
declare -A BGFREQ
BGFREQ[hg19]=0.29,0.21,0.21,0.29
BGFREQ[hg18]=0.29,0.21,0.21,0.29
BGFREQ[hg38]=0.29,0.21,0.21,0.29
BGFREQ[mm9]=0.29,0.21,0.21,0.29
BGFREQ[mm10]=0.29,0.21,0.21,0.29
BGFREQ[bosTau3]=0.29,0.21,0.21,0.29
BGFREQ[bosTau8]=0.29,0.21,0.21,0.29
BGFREQ[canFam2]=0.29,0.21,0.21,0.29
BGFREQ[canFam3]=0.29,0.21,0.21,0.29
BGFREQ[panTro2]=0.29,0.21,0.21,0.29
BGFREQ[panTro5]=0.29,0.21,0.21,0.29
BGFREQ[rn5]=0.28,0.22,0.22,0.28
BGFREQ[rn6]=0.28,0.22,0.22,0.28
BGFREQ[dm3]=0.29,0.21,0.21,0.29
BGFREQ[dm6]=0.29,0.21,0.21,0.29
BGFREQ[ce6]=0.32,0.18,0.18,0.32
BGFREQ[ce10]=0.32,0.18,0.18,0.32
BGFREQ[ce11]=0.32,0.18,0.18,0.32
BGFREQ[danRer5]=0.32,0.18,0.18,0.32
BGFREQ[danRer7]=0.32,0.18,0.18,0.32
BGFREQ[danRer10]=0.32,0.18,0.18,0.32
BGFREQ[sacCer2]=0.31,0.19,0.19,0.31
BGFREQ[sacCer3]=0.31,0.19,0.19,0.31

echo "BG nucleotide composition: ${BGFREQ[$4]}"
bg_freq=${BGFREQ[$4]}

parallel=0

if [ $# == 5 ]
then
  parallel=$5
fi

if [ -f "$1" ]
then
    matrix_file=$1
else
    echo "File \"$1\" does not exist."
    exit $E_BADARGS
fi

p_value=$2
genome_dir=$3

# Define path for files chr_NC_gi/chr_hdr (needed for BED-format conversion)
chrNC_dir=$genome_dir

assembly=$4

# Extract basename from matrix file (without path)
matrix_name=$(basename "$matrix_file")
extension="${matrix_name##*.}"
matrix_name="${matrix_name%.*}"

echo "PWM name: $matrix_name"

echo "========               Computing PWM length                ========"
matrix_len=$(cat $matrix_file | perl -ane 'next if (/^#/ or /^>/); print;' | wc -l)

file_len=$(cat $matrix_file | wc -l)

if [ $file_len -gt $matrix_len ]
then
    sed 1d $matrix_file > $matrix_file".tmp"
    matrix_file=$matrix_file".tmp"
fi

echo "PWM file: $matrix_file"
echo "PWM length: $matrix_len"
echo "PWM file length : $file_len"

echo "========               Calculating PWM score               ========"
matrix_score=$(matrix_prob -e $p_value --bg "$bg_freq" $matrix_file \
        | grep SCORE | sed 's/:/\ /'\
        | awk -F " " '{print $2}')

echo "PWM score: $matrix_score"
#echo "parallelize: $parallel"

# Run matrix_scan pipeline

if [ $parallel == 1 ]
then
  echo "Parallelize matrix_scan..."
fi

pwmout_bed=${matrix_name}_co${matrix_score}_matrix_scan.bed

echo "========               matrix_scan-based pipeline          ========"
if [ $parallel == 0 ]
then
  echo "cat $genome_dir/$assembly/chrom*.seq | matrix_scan -m $matrix_file -c $matrix_score | sort -s -k1,1 -k2,2n -k6,6 | mscan2bed -s $assembly -i $chrNC_dir > $pwmout_bed" 
  echo "..."
  cat $genome_dir/$assembly/chrom*.seq | matrix_scan -m $matrix_file -c $matrix_score | sort -s -k1,1 -k2,2n -k6,6 | mscan2bed -s $assembly -i $chrNC_dir > $pwmout_bed
else
  echo "matrix_scan_parallel.pl $genome_dir/$assembly/chrom\\*.seq $matrix_file $matrix_score | sort -s -k1,1 -k2,2n -k6,6 | mscan2bed -s $assembly -i $chrNC_dir > $pwmout_bed" 
  echo "..."
  matrix_scan_parallel.pl $genome_dir/$assembly/chrom\*.seq $matrix_file $matrix_score | sort -s -k1,1 -k2,2n -k6,6 | mscan2bed -s $assembly -i $chrNC_dir > $pwmout_bed
fi
echo "List of matches (BED format) : $pwmout_bed"
# Remove temporary PWM file
if [ $file_len -gt $matrix_len ]
then
    rm $matrix_file
fi
