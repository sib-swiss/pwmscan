#!/bin/bash

# pwm_mscan_wrapper: scan a genome with a PWM (using matrix_scan)
#  arguments:
#              matrix-file
#              p-value
#              genome-dir
#              assembly
#              non-overlapping matches [1/0]
#              parallel processing [1/0]
#
#  25.11.2015  Giovanna Ambrosini
#
#  05.12.2017  Giovanna Ambrosini
#              Use new faster version of the matrix_scan program
#

ARGS=4         # Script takes 6 arguments, but at least 4 arguments are mandatory.
E_BADARGS=85   # Wrong number of arguments passed to script.

if [ $# -lt "$ARGS" ]
then
  echo "Usage: `basename $0` <matrix-file> <p-value> <genome-dir> <assembly[hg19|mm9|..]> [<non-overlapping matches [1/0]>] [<parallel [1/0]>]"
  exit $E_BADARGS
fi

bin_dir=$(echo /home/local/bin)

# Declare associative array for background base composition
declare -A BGFREQ
BGFREQ[hg19]=0.29,0.21,0.21,0.29
BGFREQ[hg18]=0.29,0.21,0.21,0.29
BGFREQ[hg38]=0.29,0.21,0.21,0.29
BGFREQ[mm9]=0.29,0.21,0.21,0.29
BGFREQ[mm10]=0.29,0.21,0.21,0.29
BGFREQ[bosTau3]=0.29,0.21,0.21,0.29
BGFREQ[bosTau8]=0.29,0.21,0.21,0.29
BGFREQ[canFam2]=0.29,0.21,0.21,0.29
BGFREQ[canFam3]=0.29,0.21,0.21,0.29
BGFREQ[panTro2]=0.29,0.21,0.21,0.29
BGFREQ[panTro5]=0.29,0.21,0.21,0.29
BGFREQ[rn5]=0.28,0.22,0.22,0.28
BGFREQ[rn6]=0.28,0.22,0.22,0.28
BGFREQ[dm3]=0.29,0.21,0.21,0.29
BGFREQ[dm6]=0.29,0.21,0.21,0.29
BGFREQ[ce6]=0.32,0.18,0.18,0.32
BGFREQ[ce10]=0.32,0.18,0.18,0.32
BGFREQ[ce11]=0.32,0.18,0.18,0.32
BGFREQ[danRer5]=0.32,0.18,0.18,0.32
BGFREQ[danRer7]=0.32,0.18,0.18,0.32
BGFREQ[danRer10]=0.32,0.18,0.18,0.32
BGFREQ[sacCer2]=0.31,0.19,0.19,0.31
BGFREQ[sacCer3]=0.31,0.19,0.19,0.31

echo "BG nucleotide composition: ${BGFREQ[$4]}"
bg_freq=${BGFREQ[$4]}

widx_size=""

non_overlapping=1

if [ $# -ge 5 ]
then
  non_overlapping=$5
fi

parallel=1

if [ $# == 6 ]
then
  parallel=$6
fi

if [ -f "$1" ]
then
    matrix_file=$1
else
    echo "File \"$1\" does not exist."
    exit $E_BADARGS
fi

p_value=$2
genome_dir=$3

# Define path for files chr_NC_gi/chr_hdr (needed for BED-format conversion)
chrNC_dir=$genome_dir

assembly=$4

# Extract basename from matrix file (without path)
matrix_name=$(basename "$matrix_file")
extension="${matrix_name##*.}"
matrix_name="${matrix_name%.*}"

echo "PWM name: $matrix_name"

echo "========               Computing PWM length                ========"
matrix_len=$(cat $matrix_file | perl -ane 'next if (/^#/ or /^>/); print;' | wc -l)

file_len=$(cat $matrix_file | wc -l)

echo "PWM file: $matrix_file"
echo "PWM length: $matrix_len"
echo "PWM file length : $file_len"

if [ "$matrix_len" -gt "17" ]
then
  if [ $(echo "$p_value >= 0.0001 " | bc) -eq 1 ]
  then
    widx_size="-i 10"
    echo "Word index size : $widx_size"
  fi
fi

echo "========               Calculating PWM score               ========"
matrix_score=$(matrix_prob -e $p_value --bg "$bg_freq" $matrix_file \
        | grep SCORE | sed 's/:/\ /'\
        | awk -F " " '{print $2}')

echo "PWM score: $matrix_score"
#echo "parallelize: $parallel"

# Run matrix_scan pipeline

if [ $parallel == 1 ]
then
  echo "Parallelize matrix_scan..."
fi

if [ $non_overlapping == 1 ]
then
  echo "Output non-overlapping matches..."
fi

echo "========               Generating PWM score distribution   ========"
# Generate the Matrix Score Cumulative Table
pwmScore_tab=${matrix_name}_co${matrix_score}_scoretab.txt
matrix_prob --bg "$bg_freq" $matrix_file 2>/dev/null > $pwmScore_tab

echo "PWM distribution score: $pwmScore_tab"

# Run the matrix_scan pipeline
pwmout_bed=${matrix_name}_co${matrix_score}_matrix_scan.bed

echo "========               matrix_scan-based pipeline          ========"
if [ $parallel == 0 ]
then
  if [ $non_overlapping == 0 ]
  then
    echo "cat $genome_dir/$assembly/chrom[^M]*.seq | $bin_dir/matrix_scan -m $matrix_file -c $matrix_score $widx_size | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | awk 'BEGIN { while((getline line < \"$pwmScore_tab\") > 0 ) {split(line,f,\" \"); pvalue[f[1]]=f[2]} close(\"$pwmScore_tab\")} {print \$1\"\t\"\$2\"\t\"\$3\"\t\"\$4\"\t\"\$5\"\t\"\$6\"\t\"\"$matrix_name\"\"\t\"\"P-value=\"pvalue[\$5]}' > $pwmout_bed" 
    echo "..."
    cat $genome_dir/$assembly/chrom[^M]*.seq | $bin_dir/matrix_scan -m $matrix_file -c $matrix_score $widx_size | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | awk -v scoretab="$pwmScore_tab" -v pwmname="$matrix_name" 'BEGIN { while((getline line < scoretab) > 0 ) {split(line,f," "); pvalue[f[1]]=f[2]} close(scoretab)} {print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"pwmname"\t""P-value="pvalue[$5]}' > $pwmout_bed
  else
    echo "cat $genome_dir/$assembly/chrom[^M]*.seq | $bin_dir/matrix_scan -m $matrix_file -c $matrix_score $widx_size | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | filterOverlaps -l$matrix_len | awk 'BEGIN { while((getline line < \"$pwmScore_tab\") > 0 ) {split(line,f,\" \"); pvalue[f[1]]=f[2]} close(\"$pwmScore_tab\")} {print \$1\"\t\"\$2\"\t\"\$3\"\t\"\$4\"\t\"\$5\"\t\"\$6\"\t\"\"$matrix_name\"\"\t\"\"P-value=\"pvalue[\$5]}' > $pwmout_bed" 
    echo "..."
    cat $genome_dir/$assembly/chrom[^M]*.seq | $bin_dir/matrix_scan -m $matrix_file -c $matrix_score $widx_size | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | filterOverlaps -l$matrix_len | awk -v scoretab="$pwmScore_tab" -v pwmname="$matrix_name" 'BEGIN { while((getline line < scoretab) > 0 ) {split(line,f," "); pvalue[f[1]]=f[2]} close(scoretab)} {print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"pwmname"\t""P-value="pvalue[$5]}' > $pwmout_bed
  fi
else
  if [ $non_overlapping == 0 ]
  then
    echo "python $bin_dir/matrix_scan_parallel.py -m $matrix_file -f \"\$(ls $genome_dir/$assembly/chrom*.seq|grep -v chromMt)\" -c $matrix_score $widx_size -p 15 | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | awk 'BEGIN { while((getline line < \"$pwmScore_tab\") > 0 ) {split(line,f,\" \"); pvalue[f[1]]=f[2]} close(\"$pwmScore_tab\")} {print \$1\"\t\"\$2\"\t\"\$3\"\t\"\$4\"\t\"\$5\"\t\"\$6\"\t\"\"$matrix_name\"\"\t\"\"P-value=\"pvalue[\$5]}' > $pwmout_bed" 
    echo "..."
    python $bin_dir/matrix_scan_parallel.py -m $matrix_file -f "$(ls $genome_dir/$assembly/chrom*.seq|grep -v chromMt)" -c $matrix_score $widx_size -p 15 | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | awk -v scoretab="$pwmScore_tab" -v pwmname="$matrix_name" 'BEGIN { while((getline line < scoretab) > 0 ) {split(line,f," "); pvalue[f[1]]=f[2]} close(scoretab)} {print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"pwmname"\t""P-value="pvalue[$5]}' > $pwmout_bed
  else
    echo "python $bin_dir/matrix_scan_parallel.py -m $matrix_file -f \"\$(ls $genome_dir/$assembly/chrom*.seq|grep -v chromMt)\" -c $matrix_score $widx_size -p 15 | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | filterOverlaps -l$matrix_len | awk 'BEGIN { while((getline line < \"$pwmScore_tab\") > 0 ) {split(line,f,\" \"); pvalue[f[1]]=f[2]} close(\"$pwmScore_tab\")} {print \$1\"\t\"\$2\"\t\"\$3\"\t\"\$4\"\t\"\$5\"\t\"\$6\"\t\"\"$matrix_name\"\"\t\"\"P-value=\"pvalue[\$5]}' > $pwmout_bed" 
    echo "..."
    python $bin_dir/matrix_scan_parallel.py -m $matrix_file -f "$(ls $genome_dir/$assembly/chrom*.seq|grep -v chromMt)" -c $matrix_score $widx_size -p 15 | sort -s -k1,1 -k2,2n | mscan2bed -s $assembly -i $chrNC_dir | filterOverlaps -l$matrix_len | awk -v scoretab="$pwmScore_tab" -v pwmname="$matrix_name" 'BEGIN { while((getline line < scoretab) > 0 ) {split(line,f," "); pvalue[f[1]]=f[2]} close(scoretab)} {print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"pwmname"\t""P-value="pvalue[$5]}' > $pwmout_bed
  fi
fi

echo "List of matches (BED format) : $pwmout_bed"
nb_hits=`cat $pwmout_bed|wc -l`
echo "Total number of PWM matches  : $nb_hits"

rm $pwmScore_tab
