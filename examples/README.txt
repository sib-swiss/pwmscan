Application Example
==============================================================================
Scan the hg19 human genome with the chen10 CTCF Position Weight Matrix (PWM)
==============================================================================

Important remarks:
==============================================================================

The PWMScan programs rely on a few rules to make output conversion to BED format easier, namely FASTA header and file naming conventions.

FASTA headers
-----------------------------------------------

All genome sequence files have a FASTA header that is formatted as follows:


>chr|NC_000001|NC_000001.10 some text

The sequence identifier includes three words concatenated via a UNIX pipe '|': the word 'chr' followed by the NCBI RefSeq partial and full accession identifiers. The accession records indicate sequence identity. The sequence identifier is parsed by most of the PWMScan programs and utilities.

For each genome assembly, we provide a table for NCBI RefSeq to chromosome number mapping (chr_NC_gi) as well as a table for FASTA sequence identifier to chromosome number conversion (chr_hdr). The chr_NC_gi file has been downloaded from NCBI whereas the chr_hdr file has been generated by us. By consequence, the chr_hdr table can be changed to adapt to other FASTA header format conventions. 


chr_NC_gi
#Chr    Accession.ver   gi
1       NC_000001.10    224384768
2       NC_000002.11    224384767
3       NC_000003.11    224384766
4       NC_000004.11    224384765
5       NC_000005.9     224384764
6       NC_000006.11    224384763
7       NC_000007.13    224384762
8       NC_000008.10    224384761
9       NC_000009.11    224384760
10      NC_000010.10    224384759
11      NC_000011.9     224384758
12      NC_000012.11    224384757
13      NC_000013.10    224384756
14      NC_000014.8     224384755
15      NC_000015.9     224384754
16      NC_000016.9     224384753
17      NC_000017.10    224384752
18      NC_000018.9     224384751
19      NC_000019.9     224384750
20      NC_000020.10    224384749
21      NC_000021.8     224384748
22      NC_000022.10    224384747
X       NC_000023.10    224384746
Y       NC_000024.9     224384745
M       NC_012920.1     251831106


chr_hdr
#Chr    Sequence Header                 Assembly
1       chr|NC_000001|NC_000001.10      hg19
2       chr|NC_000002|NC_000002.11      hg19
3       chr|NC_000003|NC_000003.11      hg19
4       chr|NC_000004|NC_000004.11      hg19
5       chr|NC_000005|NC_000005.9       hg19
6       chr|NC_000006|NC_000006.11      hg19
7       chr|NC_000007|NC_000007.13      hg19
8       chr|NC_000008|NC_000008.10      hg19
9       chr|NC_000009|NC_000009.11      hg19
10      chr|NC_000010|NC_000010.10      hg19
11      chr|NC_000011|NC_000011.9       hg19
12      chr|NC_000012|NC_000012.11      hg19
13      chr|NC_000013|NC_000013.10      hg19
14      chr|NC_000014|NC_000014.8       hg19
15      chr|NC_000015|NC_000015.9       hg19
16      chr|NC_000016|NC_000016.9       hg19
17      chr|NC_000017|NC_000017.10      hg19
18      chr|NC_000018|NC_000018.9       hg19
19      chr|NC_000019|NC_000019.9       hg19
20      chr|NC_000020|NC_000020.10      hg19
21      chr|NC_000021|NC_000021.8       hg19
22      chr|NC_000022|NC_000022.10      hg19
X       chr|NC_000023|NC_000023.10      hg19
Y       chr|NC_000024|NC_000024.9       hg19
M       chr|NC_012920|NC_012920.1       hg19

Files and paths
-----------------------------------------------
 The tar files genomes_chr_NC_gi.tar.gz and genomes_chr_hdr.tar.gz include a list of chr_NC_gi and chr_hdr tables for several supported genome assemblies. As mentioned above, this tables are used to convert match lists to BED format.

To check the content, type:

tar -tvzf genomes_chr_NC_gi.tar.gz
tar -tvzf genomes_chr_hdr.tar.gz

To extract the files, choose a convenient directory (chr_NC_PATH), and execute the following commands:

cp genomes_chr_NC_gi.tar.gz genomes_chr_hdr.tar.gz chr_NC_PATH/
cd chr_NC_PATH
tar -xvzf genomes_chr_NC_gi.tar.gz
tar -xvzf genomes_chr_hdr.tar.gz

The default location (chr_NC_PATH) for conversion programs and scripts is the following:

/home/local/db/genome

This can be changed via a command option or, more simply, by changing the variable chrNC_dir in the shell wrapper scripts (as described below).

The CTCF PWM file that will be used in our example is chen10_ctcf.mat. 


Analysis Pipeline using two different scanning methods
==============================================================================

1) Calculate the matrix score corresponding to p-value=0.00001 (10-5)
------------------------------------------------------------------------------

matrix_prob -e 0.00001 --bg "0.29,0.21,0.21,0.29" chen10_ctcf.mat
SCORE :   1128  PERC :  96.90%

There are two basic methods to scan the genome with a PWM and a cut-off/p-value:

    1- Use a fast string-matching algorithms, such us bowtie, as follows:
        Given a PWM and a cut-off or p-value, generate all possible matches that represent the PWM with a score greater or equal to the cut-off;
        Map the list of all possible PWM matches to a reference genome ar a set of DNA sequences of interest using a fast string-matching algorithm (bowtie). 
    2- Use matrix_scan, a C program using a conventional search algorithm 

If you are interested in using the first approach, you should read sections 2) and 3), whereas for using the conventional algorithm please refer to section 4). 


2) Generate a list of all tags that represent all possible PWM matches 
   (with minimal score of 1128)
------------------------------------------------------------------------------

This step is only necessary if fast string-matchig tools are used to scan the genome.

mba -c 1128 -l 19 chen10_ctcf.mat | sort -k2,2 -nr > chen10_ctcf_co1128.dat

Remove the score column:

awk '{print $1}' chen10_ctcf_co1128.dat > chen10_ctcf_co1128_taglist.dat

Convert the tag list into FASTA format (for bowtie):

awk '{print ">"$2"\n"$1}' chen10_ctcf_co1128.dat > chen10_ctcf_co1128_taglist.fa

The reason for generating a match list in FASTA format is that we want to carry the match score over to the next steps (see below).


3) Map the tags representing the PWM to hg19
------------------------------------------------------------------------------
 PWMScan uses Bowtie as the search engine:

    1- Bowtie

    # Let's define BOWTIE_DIR as the directory containing the bowtie indexed genomes

        h_sapiens_hg19 identifies the index files linked to the hg19 human assembly
        BOWTIE_DIR = /home/local/db/bowtie
        chr_NC_PATH = /home/local/db/genome 

    # The command to map the list of PWM tags to hg19 is the follwing:

    bowtie -l 19 -n0 -a BOWTIE_DIR/h_sapiens_hg19 -f chen10_ctcf_co1128_taglist.fa --un unmapped.dat > chen10_ctcf_co1128_bowtie.out

    # It takes of the order of 30 seconds for a full scan of the hg19 genome assembly (with the exclusion of the mitochondrial chromosome). 
      The total number of hits is 143597.

    # Example:
    bowtie -l 19 -n0 -a /home/local/db/bowtie/h_sapiens_hg19 -f chen10_ctcf_co1128_taglist.fa --un unmapped.dat > chen10_ctcf_co1128_bowtie.out

    # Convert the bowtie output to BED via the following command:

    sort -s -k3,3 -k4,4n chen10_ctcf_co1128_bowtie.out | bowtie2bed -s hg19 -l 19 -i chr_NC_PATH > chen10_ctcf_co1128_bowtie.bed

    # Example:
    sort -s -k3,3 -k4,4n chen10_ctcf_co1128_bowtie.out | bowtie2bed -s hg19 -l 19 > chen10_ctcf_co1128_bowtie.bed

    # Note: to convert Bowtie output to BED format, we use the chr_hdr file for assembly hg19.
    # By default, the chr_hdr file is located at chr_NC_PATH/hg19 = /home/local/db/genome/hg19.
    chr_NC_PATH can be changed by using option -i.
    # Also note that the bowtie ouput reports the match score in the first field so that it can be easily retrieved.

    # To run the bowtie-based pipeline, type:

    bowtie -l 19 -n0 -a BOWTIE_DIR/h_sapiens_hg19 -f chen10_ctcf_co1128_taglist.fa --un unmapped.dat | sort -s -k3,3 -k4,4n | bowtie2bed -s hg19 -l 19 -i chr_NC_PATH > chen10_ctcf_co1128_bowtie.bed

    # Bowtie can read input files from stdin. You should specify "-" for stdin.
    In such case, you can run the entire pipeline as follows:

    awk '{print ">"$2"\n"$1}' chen10_ctcf_co1128.dat | bowtie -l 19 -n0 -a BOWTIE_DIR/h_sapiens_hg19 -f - --un unmapped.dat | sort -s -k3,3 -k4,4n | bowtie2bed -s hg19 -l 19 -i chr_NC_PATH > chen10_ctcf_co1128_bowtie.bed

    # Example:

    bowtie -l 19 -n0 -a /home/local/db/bowtie/h_sapiens_hg19 -f chen10_ctcf_co1128_taglist.fa --un unmapped.dat | sort -s -k3,3 -k4,4n | bowtie2bed -s hg19 -l 19 > chen10_ctcf_co1128_bowtie.bed

    # Or:

    awk '{print ">"$2"\n"$1}' chen10_ctcf_co1128.dat | bowtie -l 19 -n0 -a /home/local/db/bowtie/h_sapiens_hg19 -f - --un unmapped.dat | sort -s -k3,3 -k4,4n | bowtie2bed -s hg19 -l 19 > chen10_ctcf_co1128_bowtie.bed


4) Using a conventional scanning algorithm (matrix_scan)
------------------------------------------------------------------------------
    # Let's define GENOME_DIR/hg19 as the directory containing all hg19 chromosomes in FASTA files

    GENOME_DIR = /home/local/db/genome
    chr_NC_PATH = /home/local/db/genome

    # The command to scan the hg19 genome against the chen10 CTCF PWM is the follwing:

    cat GENOME_DIR/hg19/chrom*.seq | matrix_scan -m chen10_ctcf.mat -c 1128 | sort -s -k1,1 -k2,2n -k6,6 > chen10_ctcf_co1128_matrix_scan.out

    It takes of the order of 3 minutes to scan the entire genome. The total number of hits is 143597 (if we exclude the mitocohodrial chromosome) in agreement with the tag mapping methods.
    Note that matrix_scan reports the match score in the fifth field of its output.
    Also note that matrix_scan parses the sequence FASTA header assuming that the sequence identifier is of the following type:

    word|Accession|Accession
    Ex:
    chr|NC_000004|NC_000004.11 

    # Example:
    cat /home/local/db/genome/hg19/chrom*.seq | matrix_scan -m chen10_ctcf.mat -c 1128 | sort -s -k1,1 -k2,2n -k6,6 > chen10_ctcf_co1128_matrix_scan.out

    # Parallelization of matrix_scan

    To improve performance, we can run matrix_scan in parallel (on each chromosome file) using a simple perl script called matrix_scan_parallel.pl.

    The above example takes only 30-40 seconds to complete the task, thus competing with the bowtie-based approach. 
    To use matrix_scan_parallel.pl, type the following command:

    matrix_scan_parallel.pl /home/local/db/genome/hg19/chrom\*.seq chen10_ctcf.mat 1128 | sort -s -k1,1 -k2,2n -k6,6 > chen10_ctcf_co1128_matrix_scan.out  

    # Convert the matrix scan output to BED by issuing the following command:

    mscan2bed -s hg19 -i GENOME_DIR chen10_ctcf_co1128_matrix_scan.out > chen10_ctcf_co1128_matrix_scan.bed

    # Example:
    mscan2bed -s hg19 chen10_ctcf_co1128_matrix_scan.out > chen10_ctcf_co1128_matrix_scan.bed

    # Note : to convert matrix_scan output to BED format, we use the chr_NC_gi file for assembly hg19.
    # By default, the chr_NC_gi is located at chr_NC_PATH/hg19 = /home/local/db/genome/hg19.
    chr_NC_PATH can be changed by using option -i.

    # To run the entire pipeline:

    cat GENOME_DIR/hg19/chrom*.seq | matrix_scan -m chen10_ctcf.mat -c 1128 | sort -s -k1,1 -k2,2n -k6,6 | mscan2bed -s hg19 -i GENOME_DIR > chen10_ctcf_co1128_matrix_scan.bed

    # Example:

    cat /home/local/db/genome/hg19/chrom*.seq | matrix_scan -m chen10_ctcf.mat -c 1128 | sort -s -k1,1 -k2,2n -k6,6 | mscan2bed -s hg19 > chen10_ctcf_co1128_matrix_scan.bed 

    # Using parallelization:

    matrix_scan_parallel.pl /home/local/db/genome/hg19/chrom\*.seq chen10_ctcf.mat 1128 | sort -s -k1,1 -k2,2n -k6,6 | mscan2bed -s hg19 > chen10_ctcf_co1128_matrix_scan.bed


Shell (bash) Wrappers to execute the analysis pipeline
==============================================================================
 NOTE: the path for locating the chr_NC_gi/chr_hdr files is hard-coded in the 'pwm_bowtie_wrapper' and 'pwm_mscan_wrapper' scripts 
       (variable chrNC_dir)

 These shell wrapper scripts have been written to make it easier to run the whole pwmscan pipeline, irrespecitve of what method one chooses.
 They require to specify the matrix file containing the integer PWM, the p-value, the path to the assembly or index files, and the UCSC assembly name for the species (e.g. hg19, hg38, mm9 etc.).

 A few remarks on the general pwm_scan script.
    # The pwm_scan script scans a genome with a PWM using either bowtie or matrix_scan depending on both the p-value and the matrix length.
    # It basically checks whether the p-value is too high (i.e. the raw score cut-off too low) given the motif lenght to decide on the more suitable search engine.
    # For high p-values and long motifs, the bowtie-based strategy becomes inefficient because the list of tags representing the
    # PWM and the cut-off becomes too large (of the order of half a billion or more).
    #
    # The <genome-root-dir> argument is the root directory of the genome files (the bowtie index files, and the FASTA chromosome files used by matrix_scan). 
    # <genome-root-dir> is supposed to have two sub-directories, bowtie and genome, for storing separately the bowtie indices and the chromosome files respectively.
    # 
    # In our examples, <genome-root-dir> is set to /home/local/db.
    # The chrNC_dir variable (used for locating the the chr_NC_gi/chr_hdr files) is set to chrNC_dir=<genome-root-dir>/genome.
 
    1) Bowtie wrapper script

    # Usage: `basename $0` <matrix-file> <p-value> <bowtie-dir> <idx-file> <assembly[hg19|mm9|..]>

    # Example:

    pwm_bowtie_wrapper chen10_ctcf.mat 0.00001 /home/local/db/bowtie h_sapiens_hg19 hg19

    # Output file (BED) : chen10_ctcf_co1128_bowtie.bed

    2) Matrix Scan (matrix_scan) wrapper script

    # Usage: `basename $0` <matrix-file> <p-value> <genome-dir> <assembly[hg19|mm9|..]> <parallel [0/1]>

    # Example:

    pwm_mscan_wrapper chen10_ctcf.mat 0.00001 /home/local/db/genome hg19 1

    # Output file (BED) : chen10_ctcf_co1128_matrix_scan.bed

    3) PWM Scan (pwm_scan) wrapper script

    # Usage: `basename $0` <matrix-file> <p-value> <assembly[hg19|mm9|..]> <genome-root-dir [ex:/db]> [<parallel 0/1>]>


    # Examples:

    pwm_scan chen10_ctcf.mat 0.00001  hg19 /home/local/db

    # Or if we set the <parallel> option:

    pwm_scan chen10_ctcf.mat 0.00001  hg19 /home/local/db 1

    # Output file (BED) : chen10_ctcf_co1128_matrix_scan.bed

    # Try also:

    pwm_scan chen10_ctcf.mat 0.000001 hg19 /home/local/db 1
    pwm_scan chen10_ctcf.mat 0.000001 hg19 /home/local/db

    # Output file (BED) : chen10_ctcf_co1549.bed

    # N.B. 
    # If the <parallel> option is specified, matrix_scan is run in parallel by splitting the processing of the entire genome on
    # multiple processes for each chromosome file in parallel.
    # Of course it only works on a multi-core processor machine.


How to build Bowtie index files
==============================================================================

    Let's define BOWTIE_DIR as as the directory containing the bowtie indices.

    Go to the BOWTIE_DIR directory, and concatenate all chromosome files into a sequence file that includes the entire hg19 genome assembly:
      
      ls -1 -v DB_DIR/chrom*.seq | xargs cat > h_sapiens_hg19.fa

    You then execute the following command:

      bowtie-build -f h_sapiens_hg19.fa h_sapiens_hg19
